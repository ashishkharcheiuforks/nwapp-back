# Generated by Django 2.2.7 on 2020-01-01 03:14

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tenant_foundation', '0008_member_avatar_image'),
    ]

    operations = [
        migrations.CreateModel(
            name='Associate',
            fields=[
                ('member', models.OneToOneField(help_text='The member whom this area coordinator was promoted from.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='associate', serialize=False, to='tenant_foundation.Member')),
                ('has_signed_conflict_of_interest_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the conflict of interest agreement.', verbose_name='Has signed conflict of interest agreement')),
                ('conflict_of_interest_agreement_agreement', models.TextField(blank=True, help_text='The actual terms of conflict of interest agreement the user agreed to when they signed.', null=True, verbose_name='Conflict of interest agreement')),
                ('conflict_of_interest_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Conflict of interest agreement signed on')),
                ('has_signed_code_of_conduct_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the code of conduct.', verbose_name='Has signed code of conduct agreement')),
                ('code_of_conduct_agreement_agreement', models.TextField(blank=True, help_text='The code of conduct agreement the user agreed to when they signed.', null=True, verbose_name='Code of conduct agreement')),
                ('code_of_conduct_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the code of conduct agreement was signed on.', null=True, verbose_name='Code of conduct agreement signed on')),
                ('has_signed_confidentiality_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the confidentiality agreement.', verbose_name='Has signed confidentiality agreement')),
                ('confidentiality_agreement_agreement', models.TextField(blank=True, help_text='The actual terms of confidentiality agreement the user agreed to when they signed.', null=True, verbose_name='Confidentiality agreement agreement')),
                ('confidentiality_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Confidentiality agreement signed on')),
                ('police_check_date', models.DateField(blank=True, help_text='The date when the police check was taken on.', null=True, verbose_name='Police check date')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_associates', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_associates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Area Coordinator',
                'verbose_name_plural': 'Area Coordinators',
                'db_table': 'nwapp_associates',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='AreaCoordinator',
            fields=[
                ('member', models.OneToOneField(help_text='The member whom this area coordinator was promoted from.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='area_coordinator', serialize=False, to='tenant_foundation.Member')),
                ('has_signed_area_coordinator_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the terms of service.', verbose_name='Has signed terms of service')),
                ('area_coordinator_agreement', models.TextField(blank=True, help_text='The actual terms of agreement the user agreed to when they signed.', null=True, verbose_name='Area Coordinator agreement')),
                ('area_coordinator_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date the terms of service agreement was signed on.', null=True, verbose_name='Terms of service signed on')),
                ('has_signed_conflict_of_interest_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the conflict of interest agreement.', verbose_name='Has signed conflict of interest agreement')),
                ('conflict_of_interest_agreement_agreement', models.TextField(blank=True, help_text='The actual terms of conflict of interest agreement the user agreed to when they signed.', null=True, verbose_name='Conflict of interest agreement')),
                ('conflict_of_interest_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Conflict of interest agreement signed on')),
                ('has_signed_code_of_conduct_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the code of conduct.', verbose_name='Has signed code of conduct agreement')),
                ('code_of_conduct_agreement_agreement', models.TextField(blank=True, help_text='The code of conduct agreement the user agreed to when they signed.', null=True, verbose_name='Code of conduct agreement')),
                ('code_of_conduct_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the code of conduct agreement was signed on.', null=True, verbose_name='Code of conduct agreement signed on')),
                ('has_signed_confidentiality_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the confidentiality agreement.', verbose_name='Has signed confidentiality agreement')),
                ('confidentiality_agreement_agreement', models.TextField(blank=True, help_text='The actual terms of confidentiality agreement the user agreed to when they signed.', null=True, verbose_name='Confidentiality agreement agreement')),
                ('confidentiality_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Confidentiality agreement signed on')),
                ('police_check_date', models.DateField(blank=True, help_text='The date when the police check was taken on.', null=True, verbose_name='Police check date')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_area_coordinators', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_area_coordinators', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Area Coordinator',
                'verbose_name_plural': 'Area Coordinators',
                'db_table': 'nwapp_area_coordinators',
                'permissions': (),
                'default_permissions': (),
            },
        ),
    ]
