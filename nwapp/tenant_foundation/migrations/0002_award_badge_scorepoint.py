# Generated by Django 2.2.7 on 2020-01-02 18:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tenant_foundation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScorePoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(2, 'Neighbourhood Watch Donation'), (1, 'Other')], db_index=True, help_text='The type of score point this is.', verbose_name='Type of')),
                ('type_of_other', models.CharField(blank=True, help_text='The specific description of the type of score point this is.', max_length=63, null=True, verbose_name='Type of (Other)')),
                ('amount', models.PositiveSmallIntegerField(blank=True, default=0, help_text='The amount number awarded for this score point.', verbose_name='Amount')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text="Indicates whether score point was archived and not applied to the user's total score.", verbose_name='Is Archived')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier we want to release to the public to identify this unique score point.', verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this score point.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_score_points', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this private image upload.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_score_points', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='The user whom owns these score point.', on_delete=django.db.models.deletion.CASCADE, related_name='score_points', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Score Point',
                'verbose_name_plural': 'Score Points',
                'db_table': 'nwapp_score_points',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_of', models.PositiveSmallIntegerField(choices=[(2, 'Neighbourhood Watch Supporter'), (1, 'Other')], db_index=True, help_text='The type of score point this is.', verbose_name='Type of')),
                ('type_other', models.CharField(blank=True, help_text='The specific description of the type of score point this is.', max_length=63, null=True, verbose_name='Type of (Other)')),
                ('icon', models.CharField(help_text='The (fontawesome) icon used to describe this badge.', max_length=64, verbose_name='Icon')),
                ('colour', models.CharField(help_text='The colour of the badge.', max_length=64, verbose_name='Colour')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text="Indicates whether score point was archived and not applied to the user's total score.", verbose_name='Is Archived')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier we want to release to the public to identify this unique badge.', verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this score point.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_badges', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this private image upload.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_badges', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='The user whom owns these score point.', on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'db_table': 'nwapp_badges',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(2, 'Community Monitor'), (1, 'Other')], db_index=True, help_text='The type of score point this is.', verbose_name='Type of')),
                ('type_other', models.CharField(blank=True, help_text='The specific description of the type of score point this is.', max_length=63, null=True, verbose_name='Type of (Other)')),
                ('icon', models.CharField(help_text='The (fontawesome) icon used to describe this award.', max_length=64, verbose_name='Icon')),
                ('colour', models.CharField(help_text='The colour of the award.', max_length=64, verbose_name='Colour')),
                ('is_archived', models.BooleanField(blank=True, db_index=True, default=False, help_text="Indicates whether score point was archived and not applied to the user's total score.", verbose_name='Is Archived')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier we want to release to the public to identify this unique award.', verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this score point.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_awards', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this private image upload.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_awards', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='The user whom owns these score point.', on_delete=django.db.models.deletion.CASCADE, related_name='awards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Award',
                'verbose_name_plural': 'Awards',
                'db_table': 'nwapp_awards',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
    ]
