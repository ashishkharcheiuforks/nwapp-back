# Generated by Django 2.2.7 on 2020-01-05 23:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('shared_foundation', '0002_shareduser_score'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tenant_foundation', '0009_auto_20200105_0431'),
    ]

    operations = [
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('user', models.OneToOneField(help_text='The user whom is an staff.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='staff', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('has_signed_conflict_of_interest_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the conflict of interest agreement.', verbose_name='Has signed conflict of interest agreement')),
                ('conflict_of_interest_agreement', models.TextField(blank=True, help_text='The actual terms of conflict of interest agreement the user agreed to when they signed.', null=True, verbose_name='Conflict of interest agreement')),
                ('conflict_of_interest_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Conflict of interest agreement signed on')),
                ('has_signed_code_of_conduct_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the code of conduct.', verbose_name='Has signed code of conduct agreement')),
                ('code_of_conduct_agreement', models.TextField(blank=True, help_text='The code of conduct agreement the user agreed to when they signed.', null=True, verbose_name='Code of conduct agreement')),
                ('code_of_conduct_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the code of conduct agreement was signed on.', null=True, verbose_name='Code of conduct agreement signed on')),
                ('has_signed_confidentiality_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the confidentiality agreement.', verbose_name='Has signed confidentiality agreement')),
                ('confidentiality_agreement', models.TextField(blank=True, help_text='The actual terms of confidentiality agreement the user agreed to when they signed.', null=True, verbose_name='Confidentiality agreement agreement')),
                ('confidentiality_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the agreement was signed on.', null=True, verbose_name='Confidentiality agreement signed on')),
                ('has_signed_staff_agreement', models.BooleanField(blank=True, default=False, help_text='Boolean indicates whether has agreed to the staff agreement.', verbose_name='Has signed staff agreement')),
                ('staff_agreement', models.TextField(blank=True, help_text='The actual terms of staff agreement the user agreed to when they signed.', null=True, verbose_name='Staff agreement')),
                ('staff_agreement_signed_on', models.DateTimeField(blank=True, help_text='The date when the staff agreement was signed on.', null=True, verbose_name='Staff agreement signed on')),
                ('police_check_date', models.DateField(blank=True, help_text='The date when the police check was taken on.', null=True, verbose_name='Police check date')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_staves', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_staves', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff',
                'verbose_name_plural': 'Staves',
                'db_table': 'nwapp_staves',
                'permissions': (),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='StaffAddress',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.memberaddress',),
        ),
        migrations.CreateModel(
            name='StaffContact',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.membercontact',),
        ),
        migrations.CreateModel(
            name='StaffMetric',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tenant_foundation.membermetric',),
        ),
        migrations.CreateModel(
            name='StaffComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='The unique identifier used externally.', max_length=255, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='area_staffs', to='tenant_foundation.Comment')),
                ('staff', models.ForeignKey(help_text='The area coordinator whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='staff_comments', to='tenant_foundation.Staff')),
            ],
            options={
                'verbose_name': 'Staff Comment',
                'verbose_name_plural': 'Staff Comments',
                'db_table': 'nwapp_staff_comments',
                'ordering': ['-created_at'],
                'permissions': (),
                'default_permissions': (),
            },
        ),
    ]
