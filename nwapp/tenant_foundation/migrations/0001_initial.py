# Generated by Django 2.2.7 on 2019-11-18 17:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('type_of', models.PositiveSmallIntegerField(choices=[('business', 'Business'), ('residential', 'Residential'), ('community_cares', 'Community Cares')], db_index=True, help_text='The type of member this is.', verbose_name='Type of')),
                ('is_ok_to_email', models.BooleanField(blank=True, default=True, help_text='Indicates whether member allows being reached by email', verbose_name='Is OK to email')),
                ('is_ok_to_text', models.BooleanField(blank=True, default=True, help_text='Indicates whether member allows being reached by text.', verbose_name='Is OK to text')),
                ('first_name', models.CharField(blank=True, help_text="The member's given name.", max_length=63, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, help_text="The member's sure name.", max_length=63, null=True, verbose_name='Last Name')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('primary_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The primary telephone number used by the member.', max_length=128, null=True, region=None, verbose_name='Primary Telephone')),
                ('secondary_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The secondary or other telephone number used by the member.', max_length=128, null=True, region=None, verbose_name='Secondary Telephone')),
                ('organization_name', models.CharField(blank=True, help_text='The name of the organization or business this person represents.', max_length=255, null=True, verbose_name='Organization Name')),
                ('organization_type_of', models.PositiveSmallIntegerField(blank=True, choices=[('private', 'Private'), ('government', 'Government'), ('non_profit', 'Non-Profit'), ('unspecified', 'Unspecified')], default='unspecified', help_text='The type of organization this is based on Neighbourhood Watch Canada internal classification.', verbose_name='Organization Type of')),
                ('country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Country')),
                ('region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Region')),
                ('locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Locality')),
                ('street_number', models.CharField(blank=True, help_text='-', max_length=127, null=True, verbose_name='Street Number')),
                ('street_name', models.CharField(blank=True, help_text='-', max_length=127, null=True, verbose_name='Street Name')),
                ('apartment_unit', models.CharField(blank=True, help_text='-', max_length=127, null=True, verbose_name='Apartment Unit')),
                ('street_type', models.CharField(blank=True, help_text='-', max_length=127, null=True, verbose_name='Region')),
                ('street_type_other', models.CharField(blank=True, help_text='-', max_length=127, null=True, verbose_name='Street Type Other')),
                ('street_direction', models.CharField(blank=True, help_text='-', max_length=127, null=True, verbose_name='Street Direction')),
                ('postal_code', models.CharField(blank=True, help_text='-', max_length=32, null=True, verbose_name='Postal Code')),
                ('state', models.CharField(blank=True, choices=[('active', 'Active'), ('inactive', 'Inactive')], db_index=True, default='active', help_text='The state of this member.', max_length=15, verbose_name='State')),
                ('deactivation_reason', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'Blacklisted'), (3, 'Moved'), (4, 'Deceased'), (5, 'Do not contact'), (0, 'Not specified'), (1, 'Other')], default=0, help_text='The reason why this member was deactivated.', verbose_name='Deactivation reason')),
                ('deactivation_reason_other', models.CharField(blank=True, default='', help_text='The reason why this member was deactivated which was not in the list.', max_length=2055, verbose_name='Deactivation reason (other)')),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(blank=True, default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_members', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_modified_members', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_member_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Member',
                'verbose_name_plural': 'Members',
                'db_table': 'nwapp_members',
                'permissions': (),
                'default_permissions': (),
            },
        ),
    ]
